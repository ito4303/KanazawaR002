---
title: "データの読み込みから可視化"
author: "伊東宏樹"
format: html
execute:
  echo: true
embed-resources: true
editor: visual
---

## 準備

tidyverse（メタ）パッケージを読み込みます。

```{r}
#| label: setup

library(tidyverse)
```

## データ

データとして、国勢調査のデータを使用します。

e-statの「[国勢調査/時系列データ/男女，年齢，配偶関係/男女別人口及び人口性比 － 全国，都道府県（大正9年～令和2年）](https://www.e-stat.go.jp/dbview?sid=0003410379)」からCSV（列指向データ）をダウンロードします。ここでは、"FEH_00200521_241003100519.csv"というファイル名でダウンロードされました（ダウンロードごとにファイル名が変わると思われます）。ダウンロードされたファイルを"`data`" フォルダの中に入れておきます。

ダウンロードされたファイルをreadrパッケージの`read_csv`関数を使ってRに読み込みます。`fie.path`関数で、使用するシステムに応じたファイルパスを作成して、`data_path`変数に入れておきます。

read_csv関数では、このファイルパス(`data_path`)からファイルを読み込みます。その他の引数は、以下のとおりです。

-   `col_types`: 各列の型（各文字が各列に対応、f: 因子、c: 文字列、d: 倍精度実数）

-   `na`: データファイル中で欠測（データなし）を表す文字（ここでは"`-`"）

-   `locale`: ここでは文字コード（CP932≒Shift_JIS）を指定しています

```{r}
#| label: read_csv

data_path <- file.path("data", "FEH_00200521_241003100519.csv")
pref_data <- read_csv(data_path,
                     col_types = "fcfcfccccd",
                     na = "-",
                     locale = locale(encoding = "CP932"))
```

### 読み込みの結果

この段階で整然データ(tidy data)になっています。

```{r}
pref_data
```

### 必要な部分を残す

読み込んだデータのうち、後で使うところだけを残します。これには、dplyrパッケージの`filter`関数と`mutate`関数を使用しています。前者で必要な行だけを残し、後者では、新しい列を作ったうえで、その他の列を捨てて（`.keep = "none"` ）います。

また、ここでは、パイプ演算子("`|>`")を使用しています。これは、結果を次の関数の第1引数として与えるというものです。

```{r}
pref_data2 <- pref_data |>
  dplyr::filter(`表章項目` == "人口" &
                 !(`地域_時系列` %in% c("人口集中地区", "人口集中地区以外の地区"))) |>
  dplyr::mutate(`男女` = factor(`男女_時系列`, levels = c("総数", "男", "女")),
                `地域` = factor(`地域_時系列`, levels = unique(pref_data$`地域_時系列`)),
                `年` = as.numeric(str_sub(time_code, 1, 4)),
                `人口` = value,
                .keep = "none")
```

### 結果

必要な部分だけを残すと以下のようになりました。

```{r}
pref_data2
```

### Excelファイルの場合

readxlパッケージの`read_excel`関数で、Excelファイルを読み込みます。例として、[e-Gov/人口総数：総務省『国勢調査』](https://data.e-gov.go.jp/data/dataset/cao_20150109_0014)から、ダウンロードしたファイル(`file01.xls`)を使います。

このファイルの先頭6行にはメタデータが記述されていますので、`read_excel`関数で、"skip = 6"という引数を与えて、先頭から6行を読み飛ばすようにします。

```{r}
#| label: readxl

library(readxl)

excel_file_path <- file.path("data", "file01.xls")
city_data <- read_excel(excel_file_path, skip = 6)
head(city_data)
```

## 可視化

ここからデータをグラフにして可視化していきます。そのためにここではggplot2を使用します。

グラフ作成の前に、使用する日本語フォントを変数にいれておきます。この部分はシステムやお好みで適宜変えてください。

```{r}
#| label: font

jp_font <- "YuGothic"
```

### 折れ線グラフ

まず、全国の人口総数データを時系列で表示します。時系列データの可視化には折れ線グラフを使用します。

dplyrパッケージのfilter関数で、グラフに必要な行だけに絞り込みます。

```{r}
#| label: pref_data3

pref_data3 <- pref_data2 |>
  dplyr::filter(`地域` == "全国", `男女` == "総数")
```

`ggplot`関数は、グラフのオブジェクトの初期化をおこなう関数です。`data`引数に、使用するデータの`pref_data3`を与えます。`mapping`引数には`` aes(x = `年`, y = `人口`) ``という関数の値を与えています。これにより、X軸に年、Y軸に人口をマッピングすると指定しています。

ggplot2では、"+"演算子で、要素を追加していってグラフを完成させるようになっています。次の行の`geom_line`関数で折れ線グラフを描画します。

```{r}
#| label: line1

ggplot(data = pref_data3, mapping = aes(x = `年`, y = `人口`)) +
  geom_line()
```

これでもグラフは作成されますが、さらに見やすくなるようにしていきます。具体的には以下のようにしました。

-   `geom_point`で、点も加えます。
-   `scale_x_continuous`と`scale_y_continuous`で軸の表示を調整します。
-   `theme_gray`で、テーマの設定とフォントの設定をおこないます。

```{r}
#| label: line2

ggplot(pref_data3, aes(x = `年`, y = `人口`)) +
  geom_line() + geom_point() +
  scale_x_continuous(breaks = seq(1920, 2020, by = 10)) +
  scale_y_continuous(name = "人口（人）",
                     breaks = seq(6e+7, 12e+7, by = 2e+7),
                     labels = c("6000万", "8000万", "1億", "1億2000万")) +
  theme_gray(base_family = jp_font)
```

次に全国のデータを、総数・男・女の別に表示します。

まず、`dplyr::filter`関数で全国のデータだけ残します。この関数の返り値をパイプ演算子で次の行の`ggplot`関数に渡しています。

`ggplot`関数の`mapping`引数では、`aes関数`で`` colour = `男女` ``と引数を与えることで、`男女`列の要素別に色分けして線を引きます。また、`scale_colour_manual(values = c("black", "blue", "red"))`で、各要素の色を指定しています。

```{r}
#| label: line3

pref_data2 |>
  dplyr::filter(`地域` == "全国") |>
  ggplot(aes(x = `年`, y = `人口`, colour = `男女`)) +
  geom_line() + geom_point(size = 2.5) +
  scale_colour_manual(values = c("black", "blue", "red")) +
  scale_x_continuous(breaks = seq(1920, 2020, 10)) +
  scale_y_continuous(name = "人口（人）",
                     breaks = seq(4e+7, 12e+7, 2e+7),
                     labels = c("4000万", "6000万", "8000万", "1億", "1億2000万")) +
  theme_gray(base_family = jp_font)
```

つづいて、富山県・石川県・福井県のデータを、総数・男・女の別に表示します。`dplyr::filter`関数で、この3県のデータだけを抽出しています。`aes`関数の引数で"`` shape = `地域`, linetype = `地域` ``"とすることで、県別に点の形と線の種類が変わります。

`scale_y_continuous`関数では、Y軸の目盛りを、2×10^5^から12×10^5^の間で、2×10^5^刻みとすること、表示されるラベルは10^4^（=1万）単位とすることを指定しています。

```{r}
#| label: line4

pref_data2 |>
  dplyr::filter(`地域` %in% c("富山県", "石川県", "福井県")) |>
  ggplot(aes(x = `年`, y = `人口`, colour = `男女`, 
             shape = `地域`, linetype = `地域`)) +
  geom_line() + geom_point(size = 2.5) +
  scale_colour_manual(values = c("black", "blue", "red")) +
  scale_x_continuous(breaks = seq(1920, 2020, 10)) +
  scale_y_continuous(name = "人口（万人）",
                     limits = c(2e+5, 12e+5),
                     breaks = seq(2e+5, 12e+5, by = 2e+5),
                     labels = \(x) x / 1e+4) +
  theme_gray(base_family = jp_font)
```

### 散布図

都道府県ごとに、2020年の男女の人口を比較します。

まず、データを変形します。地域が"全国"以外（＝各都道府県）で2020年のデータを抽出して、`男女`を新しい列に、その値に`人口`を当てるように変形します。

```{r}
#| label: point_data

pref_data4 <- pref_data2 |>
  dplyr::filter(`地域` != "全国", `年` == 2020) |>
    tidyr::pivot_wider(names_from = `男女`, values_from = `人口`)
```

このようになります。

```{r}
#| label: point_data4

pref_data4
```

グラフにします。テーマを`theme_bw`に変えています。

```{r}
#| label: point1

ggplot(pref_data4, aes(x = `男`, y = `女`)) +
  geom_point() +
  theme_bw(base_family = jp_font)
```

見ばえを整えます。

-   "`geom_abline(linetype = 2, slope = 1, intercept = 0)`"で、X=Yの点線を引きます。

-   "`coord_fixed(ratio = 1)`"で、X軸とY軸の比を1:1に設定します。

```{r}
#| label: point2

ggplot(pref_data4, aes(x = `男`, y = `女`)) +
  geom_abline(linetype = 2, slope = 1, intercept = 0) +
  geom_point(size = 3, alpha = 0.6) +
  scale_x_continuous(name = "男性人口（万人）",
                     limits = c(0, 8e+6),
                     breaks = seq(0, 8e+6, by = 2e+6),
                     labels = \(x) x / 1e+4) +
  scale_y_continuous(name = "女性人口（万人）",
                     limits = c(0, 8e+6),
                     breaks = seq(0, 8e+6, by = 2e+6),
                     labels = \(x) x / 1e+4) +
  coord_fixed(ratio = 1) +
  theme_bw(base_family = jp_font)
```

### 棒グラフ

各都道府県の2020年の人口総数をグラフにします。

`geom_bar`は棒グラフを描画します。`stat = "identity"`という引数は、値をそのまま使うことを指定しています。デフォルトでは、xで指定した因子の数をカウントした値が使われます。

```{r}
#| label: bar1

pref_data2 |>
  dplyr::filter(`地域` != "全国", `男女` == "総数", `年` == 2020) |>
  ggplot(aes(x = `地域`, y = `人口`)) +
  geom_bar(stat = "identity") +
  theme_classic(base_family = jp_font)
```

横軸のラベルが重なっていて読めないので、`scale_x_discrete`関数で"`guide = guide_axis(angle = 90)`"と指定して、ラベルを90°回転させます。また、`scale_y_continuous`関数で、横軸の表示を整えます。

```{r}
#| label: bar2

pref_data2 |>
  dplyr::filter(`地域` != "全国", `男女` == "総数", `年` == 2020) |>
  ggplot(aes(x = `地域`, y = `人口`)) +
  geom_bar(stat = "identity") +
  scale_x_discrete(name = "都道府県", guide = guide_axis(angle = 90)) +
  scale_y_continuous(name = "人口（万人）",
                     limits = c(0, 1.5e+7),
                     breaks = seq(0, 1.5e+7, 5e+6),
                     labels = \(x) x / 1e+4) +
  theme_classic(base_family = jp_font)
```

横にしたほうが見やすいかもしれません。そうするには、`coord_flip()`を使います。そうすると、縦軸が下から並ぶようになるので、`scale_x_discrete`関数で、`limits = rev`として、上から並ぶようにさせます。

```{r}
pref_data2 |>
  dplyr::filter(`地域` != "全国", `男女` == "総数", `年` == 2020) |>
  ggplot(aes(x = `地域`, y = `人口`)) +
  geom_bar(stat = "identity") +
  scale_x_discrete(name = "都道府県", limits = rev) +
  scale_y_continuous(name = "人口（万人）",
                     limits = c(0, 1.5e+7),
                     breaks = seq(0, 1.5e+7, 5e+6),
                     labels = \(x) x / 1e+4) +
  coord_flip() +
  theme_classic(base_family = jp_font)
```

都道府県名のラベルと、横軸の0との間の隙間が気になるので、ここを詰めるようにします。これには、`scale_y_continuous`関数で、`expand = expansion(mult = c(0, 0.05))`と指定します。

```{r}
pref_data2 |>
  dplyr::filter(`地域` != "全国", `男女` == "総数", `年` == 2020) |>
  ggplot(aes(x = `地域`, y = `人口`)) +
  geom_bar(stat = "identity") +
  scale_x_discrete(limits = rev) +
  scale_y_continuous(name = "人口（万人）",
                     limits = c(0, 1.5e+7),
                     breaks = seq(0, 1.5e+7, 5e+6),
                     labels = \(x) x / 1e+4,
                     expand = expansion(mult = c(0, 0.05))) +
  coord_flip() +
  theme_classic(base_family = jp_font)
```

男女別の積み上げグラフにします。これには、`geom_bar`関数の引数で`position = "stack"`とします（実はデフォルトです）。また、`scale_fill_manual(values = c("blue", "red"))`で色も指定します。

```{r}
pref_data2 |>
  dplyr::filter(`地域` != "全国", `男女` != "総数", `年` == 2020) |>
  ggplot(aes(x = `地域`, y = `人口`, fill = `男女`)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = c("blue", "red")) +
  scale_x_discrete(limits = rev) +
  scale_y_continuous(name = "人口（万人）",
                     limits = c(0, 1.5e+7),
                     breaks = seq(0, 1.5e+7, 5e+6),
                     labels = \(x) x / 1e+4,
                     expand = expansion(mult = c(0, 0.05))) +
  coord_flip() +
  theme_classic(base_family = jp_font)
```
